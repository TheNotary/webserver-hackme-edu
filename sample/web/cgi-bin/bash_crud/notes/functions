#!/bin/bash

##############
# Controller #
##############

QUERY_CMD="sed -n '/^${NOTE_ID};/p' flat_file.db"


# reads NOTE_ID
show_html_for_note_by_id ()
{
  QUERY_CMD="sed -n '/^$1;/p' flat_file.db"
  # grep through the file
  RECORD=`eval ${QUERY_CMD}`

  parse_record_to_collect_values # sets TITLE and BODY
  TITLE=`sed 's/%20/ /g' <<< ${TITLE}`
  BODY=`sed 's/%20/ /g' <<< ${BODY}`
  markup="<div><label>title:</label><div>${TITLE}</div> <label>body:</label><div>${BODY}</div></div><br>"

  BODY_MARKUP[0]=${markup}
  echo ${markup}
}

query_record_by_id ()
{
    QUERY_CMD="sed -n '/^$1;/p' flat_file.db"
    # grep through the file
    RECORD=`eval ${QUERY_CMD}`
    echo ${RECORD}
}

# TODO:  make this echo out so the value can be set in a more declaritive manor
# TODO: make it take an argument where `p` is used now...
parse_record_to_collect_values ()
{
  IFS=';'
  # iterate over each line of flat_file.db and send it's input into an element of NOTE_LINES
  while read -ra p; do
    TITLE=${p[1]}
    BODY=${p[2]}
  done <<<"${RECORD}"
}



# index
convert_notes_into_markup ()
{
  COUNT=$((0))
  IFS=';'
  # iterate over each line of flat_file.db and send it's input into an element of NOTE_LINES
  while read -ra p; do
    # If we're reading an empty line... skip!
    [ -z "$p" ] && continue

    title=`sed 's/%20/ /g' <<< ${p[1]}`
    body=`sed 's/%20/ /g' <<< ${p[2]}`
    markup="<div>
      <label>title:</label><div>${title}</div> <label>body:</label><div>${body}</div>

      <button onclick='deleteAction(${p[0]})'>Delete</button>
      <a href='/cgi-bin/bash_crud/notes/${p[0]}/edit'>edit</a>
      <a href='/cgi-bin/bash_crud/notes/${p[0]}'>show</a>
    </div><br>"
    NOTE_MARKUP[$((COUNT))]=${markup}
    COUNT=$((COUNT+1))
  done <flat_file.db
}



### CREATE

# create
extract_title_from_post_data ()
{
  TITLE=""
  TITLE=`echo ${1} | grep -P 'title=([^&]*)&' -o | tr \& ' '`
  TITLE=`sed 's/;//g' <<< ${TITLE}`
  TITLE=`sed 's/\+/%20/g' <<< ${TITLE}`
  TITLE=`sed 's/title=//g' <<< ${TITLE}`

  # extract_body_from_query_string
  BODY=""
  BODY=`echo ${1} | grep -P 'body=([^&]*)&' -o | tr \& ' '`
  BODY=`sed 's/;//g' <<< ${BODY}`
  BODY=`sed 's/\+/%20/g' <<< ${BODY}`
  BODY=`sed 's/body=//g' <<< ${BODY}`

  echo "${TITLE} ${BODY}"
}

## calculate_next_id
# This will read the database and figure out what the max id is in that file and
# then return it+1
calculate_next_id ()
{
  # get all ids from db
  NOTES=`cat flat_file.db | grep -P '^(\d*);' -o | sed 's/;//g'`
  NOTES=(`echo ${NOTES}`)

  find_max_in_array ()
  {
    max=0
    for i in "${@}" # "${NOTES[@]}"
    do
      :
      ((i > max)) && max=$i
      # echo "${i} was in here"
      # do whatever on $i
    done

    # echo "max was ${max}"
    echo ${max}
  }

  new_id=`find_max_in_array ${NOTES[@]}`
  new_id=$((new_id+1))
  echo ${new_id}
}
