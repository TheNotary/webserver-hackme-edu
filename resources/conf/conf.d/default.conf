# This section lets us pass requests that hit nginx directly to the backend
# rack server
upstream ruby_server {
    server 127.0.0.1:3000;
    server 127.0.0.1:3001;
    server 127.0.0.1:3002;
}

upstream node_server {
  server 127.0.0.1:3006;
}

server {
    listen       80;
    server_name  localhost;

    root   /usr/share/nginx/html;

    location ~* ^/cgi-bin/bash_crud/notes/(\d+)/edit$ {
        fastcgi_param ID $1;

        if ($request_method = GET) {
            set $cgi_bin_path $document_root/cgi-bin/bash_crud/notes/edit;
        }

        fastcgi_pass unix:/var/run/fcgiwrap.socket;
        include /etc/nginx/fastcgi_params;
        fastcgi_param ID $1;
        fastcgi_param SCRIPT_FILENAME $cgi_bin_path;
        break;
    }

    location ~* ^/cgi-bin/bash_crud/notes/(\d+)$ {
        fastcgi_param       PATH_INFO $fastcgi_script_name;

        if ($request_method = GET) {
            set $cgi_bin_path $document_root/cgi-bin/bash_crud/notes/read;
        }
        if ($request_method = DELETE) {
            set $cgi_bin_path $document_root/cgi-bin/bash_crud/notes/delete;
        }
        if ($request_method = PUT) {
            set $cgi_bin_path $document_root/cgi-bin/bash_crud/notes/update;
        }

        fastcgi_pass unix:/var/run/fcgiwrap.socket;
        include /etc/nginx/fastcgi_params;
        fastcgi_param ID $1;
        fastcgi_param SCRIPT_FILENAME $cgi_bin_path;

        break;
    }

    # This is the basic cgi-bin server.  Since we should have fcgi running as a
    # daemon in the background, we can direct requests to /cgi-bin to fastcgi
    # to get some somewhat quick cgi execution to take place
    location /cgi-bin/ {
        # If a folder is requested by the visitor, this snipped will point the
        # request to the index.html contained within that folder if it exists
        if (-f $request_filename/index) {
            rewrite (.*) $1/index break;
        }



        fastcgi_pass unix:/var/run/fcgiwrap.socket;
        include /etc/nginx/fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        break;
    }

    # Here is where I've redirected requests like /rack_app/correct to the
    # ruby server (thin) which should be slightly faster than bare fastcgi
    location /rack_app/ {

        # this section just ensures that these 3 headers of the originating
        # request are passed along to our backend ruby server
        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        # If a folder is requested by the visitor, this snipped will point the
        # request to the index.html contained within that folder if it exists
        if (-f $request_filename/index.html) {
            rewrite (.*) $1/index.html break;
        }

        # If the request by the visitor can be fufilled by redirecting the user
        # to the requested resource by appended '.html' to the request, then do so...
        if (-f $request_filename.html) {
            rewrite (.*) $1.html break;
        }

        # if the file being requested doesn't exist (that's the if statement bit)
        # then we use proxy_pass to instruct nginx to pass the request to the
        # thin's ports which we defined at the top of this file to be named
        # ruby_server
        if (!-f $request_filename) {
            proxy_pass http://ruby_server;
            break;
        }
    }

    location ~* ^/node(?<section>.*)$ {
        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        if (-f $request_filename/index.html) {
            rewrite (.*) $1/index.html break;
        }

        if (-f $request_filename.html) {
            rewrite (.*) $1.html break;
        }

        if (!-f $request_filename) {
            proxy_pass http://node_server$section;
            break;
        }
    }


}
